name: Deploy to LINE Notify and Update Record

on:
  schedule:
    - cron: "0 12 * * 3,6,0" # UTC時間12:00，對應東八區20:00，每週三、六、日執行
  workflow_dispatch: # 允許手動觸發

jobs:
  run-script:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 獲取所有歷史記錄，以便進行合併

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # 或者你需要的 Node.js 版本

      - name: Install dependencies
        run: npm ci

      - name: Run crawler
        id: crawler # 設置 ID，以便在後續步驟中引用
        run: |
          output=$(node crawler.js)
          echo "$output"
          unique_data=$(echo "$output" | grep "UNIQUE_DATA:" | sed 's/UNIQUE_DATA://g')
          echo "unique_data=$unique_data" >> $GITHUB_OUTPUT

      - name: Send LINE Message via Messaging API
        if: ${{ steps.crawler.outputs.unique_data != '[]' }}
        env:
          # --- 新增：從 Secrets 取得 LINE Messaging API 的權杖和目標 ID ---
          # --- New: Get LINE Messaging API Token and Target ID from Secrets ---
          LINE_MESSAGING_API_TOKEN: ${{ secrets.LINE_MESSAGING_API_TOKEN }} # 替換成你的 Messaging API Channel Access Token Secret 名稱 (Replace with your Messaging API Channel Access Token Secret name)
          LINE_TARGET_ID: ${{ secrets.LINE_TARGET_ID }} # 替換成你的目標 User/Group/Room ID Secret 名稱 (Replace with your target User/Group/Room ID Secret name)
          # --- Pass the data from the previous step ---
          UNIQUE_DATA: ${{ steps.crawler.outputs.unique_data }}
        run: |
          # 1. 格式化訊息文字 (Format the message text)
          #    使用與之前相同的 sed 邏輯來建立純文字訊息
          #    (Use the same sed logic as before to create the plain text message)
          message_text=$(echo "$UNIQUE_DATA")
          echo "Message: $message_text"
          # 檢查格式化後的訊息是否為空 (Optional check if formatted message is empty)
          if [ -z "$message_text" ]; then
            echo "Formatted message is empty. Skipping sending."
            exit 0
          fi

          # 2. 準備 JSON Payload (Prepare JSON Payload)
          #    使用 shell 變數建構 JSON 字串
          #    注意變數的引用方式以確保正確解析
          echo "Sending message: $message_text"
          echo "text": "'"${message_text}"'"
          json_payload='{
            "to": "'"${LINE_TARGET_ID}"'",
            "messages": [
              {
                "type": "text",
                "text": "http://withhive.me/313/sw2025juny5c\n水屬性召喚書x30\n\nhttp://withhive.me/313/again11tyu\n神秘召喚書x5\n\nhttp://withhive.me/313/ty4sw11th\n能量x300、魔力石x2000000、神秘召喚書x5、runex500\n\nhttp://withhive.me/313/sw11yabdaygift\n魔力石x5000000、神秘召喚書x30"
              }
            ]
          }'

          echo $json_payload

          # 3. 發送 HTTP POST 請求到 LINE Messaging API (Send HTTP POST request to LINE Messaging API)
          #    使用 curl 指令，並設定 Header 和 Body
          #    -X POST 指定方法為 POST
          #    -H 設定 Header，使用 Secrets 取得的 Token
          #    -d 設定 Body，傳入準備好的 JSON 字串
          #    -w "\nHTTP Status: %{http_code}\n" 用於在 Log 中顯示 HTTP 回應狀態碼
          #    -o /dev/null 避免將回應內容印到 Log 中
          curl -X POST https://api.line.me/v2/bot/message/push \
            -H "Authorization: Bearer $LINE_MESSAGING_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$json_payload" \

      # - name: Commit and push if changed
      #   run: |
      #     git config --local user.email "action@github.com"
      #     git config --local user.name "GitHub Action"
      #     git add record.json
      #     if git diff --staged --quiet; then
      #       echo "No changes to commit"
      #     else
      #       git commit -m "Update record.json on $(date +'%Y-%m-%d %H:%M:%S %Z')"
      #       git pull origin main --rebase  # 使用 pull --rebase 確保同步最新的提交
      #       git push origin main
      #     fi
