name: Deploy to LINE Notify and Update Record

on:
  schedule:
    - cron: "0 12 * * 3,6,0" # UTC時間12:00，對應東八區20:00，每週三、六、日執行
  workflow_dispatch: # 允許手動觸發

jobs:
  run-script:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 獲取所有歷史記錄，以便進行合併

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # 或者你需要的 Node.js 版本

      - name: Install dependencies
        run: npm ci

      - name: Run crawler
        id: crawler # 設置 ID，以便在後續步驟中引用
        run: |
          output=$(node crawler.js)
          echo "$output"
          unique_data=$(echo "$output" | grep "UNIQUE_DATA:" | sed 's/UNIQUE_DATA://g')
          echo "unique_data=$unique_data" >> $GITHUB_OUTPUT

      - name: Send LINE Message via Messaging API
        if: ${{ steps.crawler.outputs.unique_data != '[]' }}
        env:
          # --- 新增：從 Secrets 取得 LINE Messaging API 的權杖和目標 ID ---
          # --- New: Get LINE Messaging API Token and Target ID from Secrets ---
          LINE_MESSAGING_API_TOKEN: ${{ secrets.LINE_MESSAGING_API_TOKEN }} # 替換成你的 Messaging API Channel Access Token Secret 名稱 (Replace with your Messaging API Channel Access Token Secret name)
          LINE_TARGET_ID: 'U96b585bc99b4d593d532f0b042eb9110'          # 替換成你的目標 User/Group/Room ID Secret 名稱 (Replace with your target User/Group/Room ID Secret name)
          # --- Pass the data from the previous step ---
          UNIQUE_DATA: ${{ steps.crawler.outputs.unique_data }}
        run: |
          # 1. 格式化訊息文字 (Format the message text)
          #    使用與之前相同的 sed 邏輯來建立純文字訊息
          #    (Use the same sed logic as before to create the plain text message)
          message_text=$(echo "$UNIQUE_DATA" | sed 's/^\["/👍\n\n/; s/"\]$//; s/","/\n/g; s/：/\n/g')
  
          # 檢查格式化後的訊息是否為空 (Optional check if formatted message is empty)
          if [ -z "$message_text" ]; then
            echo "Formatted message is empty. Skipping sending."
            exit 0
          fi

      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add record.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update record.json on $(date +'%Y-%m-%d %H:%M:%S %Z')"
            git pull origin main --rebase  # 使用 pull --rebase 確保同步最新的提交
            git push origin main
          fi
